#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import importlib
import os
import bxi.base.log as logging
import bxi.base.posless as posless
import bxi.base.parserconf as bxiparserconf

from qat.core.linker import GenericInstantiator
from qat.core.circ import writecirc

from qat.lang.parser.qasm_parser import OqasmParser, extract_inc
from qat.lang.AQASM.misc import generate_gate_set

_LOGGER = logging.getLogger(logging.LIB_PREFIX + "qat.lang.aqasm2circ")


class UnknownModule(Exception):
    """ Raised when some unknown python module is linked to the compiler """

    def __init__(self, mod_name):
        super(UnknownModule, self).__init__()
        self.name = mod_name


def __str__(self):
    return ("Can't load module '{}'\nMaybe check your " + "$PYTHONPATH?").format(
        self.name
    )


def main():
    helper = bxiparserconf.FilteredHelpFormatter
    parser = posless.ArgumentParser(
        description="Compiles an OQASM file into" " a circuit file.",
        formatter_class=helper,
    )

    parser.add_argument(
        "input",
        type=str,
        metavar="OQASM_FILE",
        help="Filename containning the OPENQASM" " circuit to be compiled",
    )

    parser.add_argument(
        "output",
        type=str,
        default=None,
        nargs="?",
        metavar="OUTFILE",
        help="Output file receiving the compiled circuit",
    )

    args = parser.parse_args()

    fname = args.input
    output = args.output
    if output is None:
        output = os.path.splitext(fname)[0] + ".circ"
    aq_parser = OqasmParser()
    aq_parser.build(debug=False, errorlog=_LOGGER)

    # Parsing the file and running the compiler
    # print(extract_inc(fname))
    res = aq_parser.parse(extract_inc(fname), debug=False)
    if res == 1:
        # Generating the circuit from the compiler
        circ = aq_parser.compiler.gen_circuit()
        global_gate_set = aq_parser.compiler.gate_set

        # Inlining the various lib calls
        instantiator = GenericInstantiator()
        instantiator.instantiate(circ, global_gate_set)
        # Filling up the matrices
        instantiator.fill_matrices(circ, global_gate_set)
        # Writing the circuit in the output file
        writecirc(circ, output)


if __name__ == "__main__":
    main()
