#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@brief 

@namespace ...
@authors Reda Drissi <mohamed-reda.drissi@atos.net>
@copyright 2019  Bull S.A.S.  -  All rights reserved.
           This is not Free or Open Source software.
           Please contact Bull SAS for details about its license.
           Bull - Rue Jean JaurÃ¨s - B.P. 68 - 78340 Les Clayes-sous-Bois


Description ...


"""

import cirq
from qat.interop.cirq.converters import to_cirq_circ

from qat.core.qpu.qpu import QPUHandler
from qat.core.wrappers.result import State
from qat.comm.shared.ttypes import Result as QlmRes
from qat.comm.shared.ttypes import Sample as ThriftSample
from qat.comm.shared.ttypes import Job

from collections import Counter
import numpy as np


def generate_qlm_result(cirq_result):
    """ Converts cirq result to QLM Result

    Args:
        cirq_result: The result object generated by cirq
    Returns:
        A QLM Result object built from cirq_result
    """
    # Cirq encodes measures in a dictionary where the key is the coordinate of
    # the qubit, and the value is a list where the ith element is the result
    # of the measure of the qubit during the ith trial.

    nbshots = len(cirq_result.measurements[next(iter(cirq_result.measurements))])
    measurements = ["" for _ in range(nbshots)]
    for entry in cirq_result.measurements.values():
        for shot in range(len(entry)):
            measurements[shot] += str(int(entry[shot][0]))

    measurements = [ int(_, 2) for _ in measurements]
    counts = Counter(measurements)
    qlm_result = QlmRes()
    qlm_result.raw_data = [
        ThriftSample(state=state,
                     probability=freq / nbshots,
                     err=np.sqrt(freq/nbshots *(1.-freq/nbshots)/(nbshots-1))
                     if nbshots > 1 else None
                    )
        for state, freq in counts.items()
    ]
    return qlm_result

class CirqQPU(QPUHandler):
    def __init__(self, qpu=cirq.Simulator(), plugins=None):
        super(QPUHandler, self).__init__(plugins)
        self.qpu = qpu

    def set_qpu(self, qpu):
        self.qpu = qpu

    def submit_job(self, qlm_job):
        qlm_circuit = qlm_job.circuit
        nbshots = qlm_job.nbshots
        cirq_circuit = to_cirq_circ(qlm_circuit)
        result = generate_qlm_result(self.qpu.run(cirq_circuit,
                                                  repetitions=nbshots))
        return result


